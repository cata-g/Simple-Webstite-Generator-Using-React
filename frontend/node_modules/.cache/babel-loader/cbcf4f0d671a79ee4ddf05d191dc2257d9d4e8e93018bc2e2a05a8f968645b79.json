{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\website_generator\\\\frontend\\\\src\\\\components\\\\formatting_options\\\\TextStyle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextStyle(newStyle, setNewStyle) {\n  _s();\n  const [isBold, setBold] = useState(false);\n  const [isItalic, setItalic] = useState(false);\n  const addStyle = style => {\n    let actualStyle = newStyle;\n    actualStyle += style;\n    setNewStyle(actualStyle);\n  };\n  const handleTextStyle = id => {\n    switch (id) {\n      case 0:\n        addStyle(\"fw-bold \");\n        setBold(!isBold);\n        if (isBold) setNewStyle(\"fw-normal \");\n        break;\n      case 1:\n        setNewStyle(\"fw-normal \");\n        break;\n      case 2:\n        addStyle(\"fst-italic \");\n        setItalic(!isItalic);\n        if (isItalic) setNewStyle(\"fw-normal \");\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ButtonGroup, {\n    \"aria-label\": \"Text Style\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: isBold ? \"secondary\" : \"light\",\n      onClick: () => handleTextStyle(0),\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faBold\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: isItalic ? \"secondary\" : \"light\",\n      onClick: () => handleTextStyle(2),\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faItalic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(TextStyle, \"D1DYCE3GInpxVFjQMnR06s6sl9I=\");\n_c = TextStyle;\nvar _c;\n$RefreshReg$(_c, \"TextStyle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TextStyle","newStyle","setNewStyle","_s","isBold","setBold","isItalic","setItalic","addStyle","style","actualStyle","handleTextStyle","id","ButtonGroup","children","Button","variant","onClick","FontAwesomeIcon","icon","faBold","fileName","_jsxFileName","lineNumber","columnNumber","faItalic","_c","$RefreshReg$"],"sources":["D:/webdev/website_generator/frontend/src/components/formatting_options/TextStyle.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function TextStyle(newStyle, setNewStyle) {\r\n  const [isBold, setBold] = useState(false);\r\n  const [isItalic, setItalic] = useState(false);\r\n\r\n  const addStyle = (style) => {\r\n    let actualStyle = newStyle;\r\n    actualStyle += style;\r\n    setNewStyle(actualStyle);\r\n  };\r\n\r\n  const handleTextStyle = (id) => {\r\n    switch (id) {\r\n      case 0:\r\n        addStyle(\"fw-bold \");\r\n        setBold(!isBold);\r\n        if (isBold) setNewStyle(\"fw-normal \");\r\n        break;\r\n      case 1:\r\n        setNewStyle(\"fw-normal \");\r\n        break;\r\n      case 2:\r\n        addStyle(\"fst-italic \");\r\n        setItalic(!isItalic);\r\n        if (isItalic) setNewStyle(\"fw-normal \");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonGroup aria-label=\"Text Style\">\r\n      <Button\r\n        variant={isBold ? \"secondary\" : \"light\"}\r\n        onClick={() => handleTextStyle(0)}\r\n      >\r\n        <FontAwesomeIcon icon={faBold} />\r\n      </Button>\r\n      <Button\r\n        variant={isItalic ? \"secondary\" : \"light\"}\r\n        onClick={() => handleTextStyle(2)}\r\n      >\r\n        <FontAwesomeIcon icon={faItalic} />\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,SAASA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAAC,EAAA;EACvD,MAAM,CAACC,MAAM,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACS,QAAQ,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMW,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAIC,WAAW,GAAGT,QAAQ;IAC1BS,WAAW,IAAID,KAAK;IACpBP,WAAW,CAACQ,WAAW,CAAC;EAC1B,CAAC;EAED,MAAMC,eAAe,GAAIC,EAAE,IAAK;IAC9B,QAAQA,EAAE;MACR,KAAK,CAAC;QACJJ,QAAQ,CAAC,UAAU,CAAC;QACpBH,OAAO,CAAC,CAACD,MAAM,CAAC;QAChB,IAAIA,MAAM,EAAEF,WAAW,CAAC,YAAY,CAAC;QACrC;MACF,KAAK,CAAC;QACJA,WAAW,CAAC,YAAY,CAAC;QACzB;MACF,KAAK,CAAC;QACJM,QAAQ,CAAC,aAAa,CAAC;QACvBD,SAAS,CAAC,CAACD,QAAQ,CAAC;QACpB,IAAIA,QAAQ,EAAEJ,WAAW,CAAC,YAAY,CAAC;QACvC;MACF;QACE;IAAM;EAEZ,CAAC;EAED,oBACEH,OAAA,CAACc,WAAW;IAAC,cAAW,YAAY;IAAAC,QAAA,gBAClCf,OAAA,CAACgB,MAAM;MACLC,OAAO,EAAEZ,MAAM,GAAG,WAAW,GAAG,OAAQ;MACxCa,OAAO,EAAEA,CAAA,KAAMN,eAAe,CAAC,CAAC,CAAE;MAAAG,QAAA,eAElCf,OAAA,CAACmB,eAAe;QAACC,IAAI,EAAEC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC1B,eACTzB,OAAA,CAACgB,MAAM;MACLC,OAAO,EAAEV,QAAQ,GAAG,WAAW,GAAG,OAAQ;MAC1CW,OAAO,EAAEA,CAAA,KAAMN,eAAe,CAAC,CAAC,CAAE;MAAAG,QAAA,eAElCf,OAAA,CAACmB,eAAe;QAACC,IAAI,EAAEM;MAAS;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC5B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAElB;AAACrB,EAAA,CA9CuBH,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}