{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\website_generator\\\\frontend\\\\src\\\\components\\\\formatting_options\\\\TextAlignment.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAlignLeft, faAlignRight, faAlignCenter } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextAlignment(newAlign, setNewAlign) {\n  _s();\n  const [isLeft, setLeft] = useState(false);\n  const [isRight, setRight] = useState(false);\n  const [isCenter, setCenter] = useState(true);\n  const handleTextAlg = id => {\n    switch (id) {\n      case 0:\n        setNewAlign(\"text-start \");\n        setLeft(!isLeft);\n        setCenter(false);\n        setRight(false);\n        if (isLeft) goDefaultAlgn();\n        break;\n      case 1:\n        setNewAlign(\"text-center \");\n        setLeft(false);\n        setRight(false);\n        break;\n      case 2:\n        setNewAlign(\"text-end \");\n        setLeft(false);\n        setCenter(false);\n        setRight(!isRight);\n        if (isRight) goDefaultAlgn();\n        break;\n      default:\n        break;\n    }\n  };\n  function goDefaultAlgn() {\n    setCenter(true);\n    setLeft(false);\n    setRight(false);\n    setNewAlign(\"text-center \");\n  }\n  return /*#__PURE__*/_jsxDEV(ButtonGroup, {\n    \"aria-label\": \"Text Alignment\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: isLeft ? \"secondary\" : \"light\",\n      onClick: () => handleTextAlg(0),\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faAlignLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: isCenter ? \"secondary\" : \"light\",\n      onClick: () => handleTextAlg(1),\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faAlignCenter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: isRight ? \"secondary\" : \"light\",\n      onClick: () => handleTextAlg(2),\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faAlignRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(TextAlignment, \"/PdrMm5JOeVG2tioKD0QPd2pF88=\");\n_c = TextAlignment;\nvar _c;\n$RefreshReg$(_c, \"TextAlignment\");","map":{"version":3,"names":["React","ButtonGroup","FontAwesomeIcon","faAlignLeft","faAlignRight","faAlignCenter","jsxDEV","_jsxDEV","TextAlignment","newAlign","setNewAlign","_s","isLeft","setLeft","useState","isRight","setRight","isCenter","setCenter","handleTextAlg","id","goDefaultAlgn","children","Button","variant","onClick","icon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/webdev/website_generator/frontend/src/components/formatting_options/TextAlignment.jsx"],"sourcesContent":["import React from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAlignLeft,\r\n  faAlignRight,\r\n  faAlignCenter,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function TextAlignment(newAlign, setNewAlign) {\r\n  const [isLeft, setLeft] = useState(false);\r\n  const [isRight, setRight] = useState(false);\r\n  const [isCenter, setCenter] = useState(true);\r\n\r\n  const handleTextAlg = (id) => {\r\n    switch (id) {\r\n      case 0:\r\n        setNewAlign(\"text-start \");\r\n        setLeft(!isLeft);\r\n        setCenter(false);\r\n        setRight(false);\r\n        if (isLeft) goDefaultAlgn();\r\n        break;\r\n      case 1:\r\n        setNewAlign(\"text-center \");\r\n        setLeft(false);\r\n        setRight(false);\r\n        break;\r\n      case 2:\r\n        setNewAlign(\"text-end \");\r\n        setLeft(false);\r\n        setCenter(false);\r\n        setRight(!isRight);\r\n        if (isRight) goDefaultAlgn();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  function goDefaultAlgn() {\r\n    setCenter(true);\r\n    setLeft(false);\r\n    setRight(false);\r\n    setNewAlign(\"text-center \");\r\n  }\r\n  return (\r\n    <ButtonGroup aria-label=\"Text Alignment\">\r\n      <Button\r\n        variant={isLeft ? \"secondary\" : \"light\"}\r\n        onClick={() => handleTextAlg(0)}\r\n      >\r\n        <FontAwesomeIcon icon={faAlignLeft} />\r\n      </Button>\r\n      <Button\r\n        variant={isCenter ? \"secondary\" : \"light\"}\r\n        onClick={() => handleTextAlg(1)}\r\n      >\r\n        <FontAwesomeIcon icon={faAlignCenter} />\r\n      </Button>\r\n      <Button\r\n        variant={isRight ? \"secondary\" : \"light\"}\r\n        onClick={() => handleTextAlg(2)}\r\n      >\r\n        <FontAwesomeIcon icon={faAlignRight} />\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,6BAA6B;AACrD,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SACEC,WAAW,EACXC,YAAY,EACZC,aAAa,QACR,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,eAAe,SAASC,aAAaA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAAC,EAAA;EAC3D,MAAM,CAACC,MAAM,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACG,QAAQ,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMK,aAAa,GAAIC,EAAE,IAAK;IAC5B,QAAQA,EAAE;MACR,KAAK,CAAC;QACJV,WAAW,CAAC,aAAa,CAAC;QAC1BG,OAAO,CAAC,CAACD,MAAM,CAAC;QAChBM,SAAS,CAAC,KAAK,CAAC;QAChBF,QAAQ,CAAC,KAAK,CAAC;QACf,IAAIJ,MAAM,EAAES,aAAa,EAAE;QAC3B;MACF,KAAK,CAAC;QACJX,WAAW,CAAC,cAAc,CAAC;QAC3BG,OAAO,CAAC,KAAK,CAAC;QACdG,QAAQ,CAAC,KAAK,CAAC;QACf;MACF,KAAK,CAAC;QACJN,WAAW,CAAC,WAAW,CAAC;QACxBG,OAAO,CAAC,KAAK,CAAC;QACdK,SAAS,CAAC,KAAK,CAAC;QAChBF,QAAQ,CAAC,CAACD,OAAO,CAAC;QAClB,IAAIA,OAAO,EAAEM,aAAa,EAAE;QAC5B;MACF;QACE;IAAM;EAEZ,CAAC;EAED,SAASA,aAAaA,CAAA,EAAG;IACvBH,SAAS,CAAC,IAAI,CAAC;IACfL,OAAO,CAAC,KAAK,CAAC;IACdG,QAAQ,CAAC,KAAK,CAAC;IACfN,WAAW,CAAC,cAAc,CAAC;EAC7B;EACA,oBACEH,OAAA,CAACN,WAAW;IAAC,cAAW,gBAAgB;IAAAqB,QAAA,gBACtCf,OAAA,CAACgB,MAAM;MACLC,OAAO,EAAEZ,MAAM,GAAG,WAAW,GAAG,OAAQ;MACxCa,OAAO,EAAEA,CAAA,KAAMN,aAAa,CAAC,CAAC,CAAE;MAAAG,QAAA,eAEhCf,OAAA,CAACL,eAAe;QAACwB,IAAI,EAAEvB;MAAY;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC/B,eACTvB,OAAA,CAACgB,MAAM;MACLC,OAAO,EAAEP,QAAQ,GAAG,WAAW,GAAG,OAAQ;MAC1CQ,OAAO,EAAEA,CAAA,KAAMN,aAAa,CAAC,CAAC,CAAE;MAAAG,QAAA,eAEhCf,OAAA,CAACL,eAAe;QAACwB,IAAI,EAAErB;MAAc;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACjC,eACTvB,OAAA,CAACgB,MAAM;MACLC,OAAO,EAAET,OAAO,GAAG,WAAW,GAAG,OAAQ;MACzCU,OAAO,EAAEA,CAAA,KAAMN,aAAa,CAAC,CAAC,CAAE;MAAAG,QAAA,eAEhCf,OAAA,CAACL,eAAe;QAACwB,IAAI,EAAEtB;MAAa;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAElB;AAACnB,EAAA,CA3DuBH,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}