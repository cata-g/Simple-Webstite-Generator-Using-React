[{"D:\\webdev\\website_generator\\frontend\\src\\index.js":"1","D:\\webdev\\website_generator\\frontend\\src\\reportWebVitals.js":"2","D:\\webdev\\website_generator\\frontend\\src\\App.jsx":"3","D:\\webdev\\website_generator\\frontend\\src\\components\\Creator.jsx":"4","D:\\webdev\\website_generator\\frontend\\src\\components\\Visual.jsx":"5","D:\\webdev\\website_generator\\frontend\\src\\components\\HierarchyComponent.jsx":"6","D:\\webdev\\website_generator\\frontend\\src\\components\\Components.jsx":"7"},{"size":597,"mtime":1678360470615,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1678090236247,"results":"10","hashOfConfig":"9"},{"size":134,"mtime":1678263973778,"results":"11","hashOfConfig":"9"},{"size":9820,"mtime":1680089386675,"results":"12","hashOfConfig":"9"},{"size":159,"mtime":1678359046634,"results":"13","hashOfConfig":"9"},{"size":7486,"mtime":1680088226007,"results":"14","hashOfConfig":"9"},{"size":839,"mtime":1680085663784,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"syxn7i",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\webdev\\website_generator\\frontend\\src\\index.js",[],[],[],"D:\\webdev\\website_generator\\frontend\\src\\reportWebVitals.js",[],[],"D:\\webdev\\website_generator\\frontend\\src\\App.jsx",[],[],"D:\\webdev\\website_generator\\frontend\\src\\components\\Creator.jsx",[],[],"D:\\webdev\\website_generator\\frontend\\src\\components\\Visual.jsx",[],[],"D:\\webdev\\website_generator\\frontend\\src\\components\\HierarchyComponent.jsx",["39","40","41","42"],[],"import React, { useState } from \"react\";\r\nimport \"./Components.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faBold,\r\n  faItalic,\r\n  faAlignLeft,\r\n  faAlignRight,\r\n  faAlignCenter,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function Components({\r\n  id,\r\n  name,\r\n  content,\r\n  handleAdd,\r\n  handleDelete,\r\n  handleEditComponent,\r\n  tags,\r\n  style,\r\n  alignment,\r\n  cap,\r\n  isTable,\r\n  isList,\r\n  text,\r\n}) {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [newContentText, setNewContentText] = useState(text);\r\n  const [newCap, setNewCap] = useState(cap);\r\n  const [newAlign, setNewAlign] = useState(alignment);\r\n  const [newStyle, setNewStyle] = useState(\"\");\r\n  const [colNo, setColNo] = useState(3);\r\n  const [rowNo, setRowNo] = useState(3);\r\n\r\n  const [isBold, setBold] = useState(false);\r\n  const [isItalic, setItalic] = useState(false);\r\n  const [isLeft, setLeft] = useState(false);\r\n  const [isRight, setRight] = useState(false);\r\n  const [isCenter, setCenter] = useState(true);\r\n  const [isLower, setLower] = useState(false);\r\n  const [isUpper, setUpper] = useState(false);\r\n  const [isCap, setCap] = useState(true);\r\n\r\n  const handleClose = () => setShowModal(false);\r\n  const handleShow = () => setShowModal(true);\r\n\r\n  const addStyle = (style) => {\r\n    let actualStyle = newStyle;\r\n    actualStyle += style;\r\n    setNewStyle(actualStyle);\r\n  };\r\n  const handleTextStyle = (id) => {\r\n    switch (id) {\r\n      case 0:\r\n        addStyle(\"fw-bold \");\r\n        setBold(!isBold);\r\n        if (isBold) setNewStyle(\"fw-normal \");\r\n        break;\r\n      case 1:\r\n        setNewStyle(\"fw-normal \");\r\n        break;\r\n      case 2:\r\n        addStyle(\"fst-italic \");\r\n        setItalic(!isItalic);\r\n        if (isItalic) setNewStyle(\"fw-normal \");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  function goDefaultAlgn() {\r\n    setCenter(true);\r\n    setLeft(false);\r\n    setRight(false);\r\n    setNewAlign(\"text-center \");\r\n  }\r\n\r\n  function goDefaultCap() {\r\n    setCap(true);\r\n    setLower(false);\r\n    setUpper(false);\r\n    setNewCap(\"text-capitalize \");\r\n  }\r\n\r\n  const handleTextAlg = (id) => {\r\n    switch (id) {\r\n      case 0:\r\n        setNewAlign(\"text-start \");\r\n        setLeft(!isLeft);\r\n        setCenter(false);\r\n        setRight(false);\r\n        if (isLeft) goDefaultAlgn();\r\n        break;\r\n      case 1:\r\n        setNewAlign(\"text-center \");\r\n        setLeft(false);\r\n        setRight(false);\r\n        break;\r\n      case 2:\r\n        setNewAlign(\"text-end \");\r\n        setLeft(false);\r\n        setCenter(false);\r\n        setRight(!isRight);\r\n        if (isRight) goDefaultAlgn();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleTextCap = (id) => {\r\n    switch (id) {\r\n      case 0:\r\n        setNewCap(\"text-lowercase \");\r\n        setLower(!isLower);\r\n        setCap(false);\r\n        setUpper(false);\r\n        if (isLower) goDefaultCap();\r\n        break;\r\n      case 1:\r\n        setNewCap(\"text-uppercase \");\r\n        setLower(false);\r\n        setCap(false);\r\n        setUpper(!isUpper);\r\n        if (isUpper) goDefaultCap();\r\n        break;\r\n      case 2:\r\n        setNewCap(\"text-capitalize \");\r\n        setLower(false);\r\n        setUpper(false);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const saveContent = () => {\r\n    handleEditComponent(\r\n      newContentText,\r\n      id,\r\n      tags,\r\n      newContentText,\r\n      newStyle,\r\n      newCap,\r\n      newAlign\r\n    );\r\n    handleClose();\r\n  };\r\n\r\n  const setRowNumber = (rows) => {\r\n    setRowNo(rows);\r\n  };\r\n\r\n  const setColNumber = (cols) => {\r\n    setColNo(cols);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showModal && (\r\n        <Modal show={showModal} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{tags}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <ButtonGroup aria-label=\"Text Style\">\r\n              <Button\r\n                variant={isBold ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextStyle(0)}\r\n              >\r\n                <FontAwesomeIcon icon={faBold} />\r\n              </Button>\r\n              <Button\r\n                variant={isItalic ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextStyle(2)}\r\n              >\r\n                <FontAwesomeIcon icon={faItalic} />\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup aria-label=\"Text Transform\">\r\n              <Button\r\n                variant={isLower ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextCap(0)}\r\n              >\r\n                abc\r\n              </Button>\r\n              <Button\r\n                variant={isUpper ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextCap(1)}\r\n              >\r\n                ABC\r\n              </Button>\r\n              <Button\r\n                variant={isCap ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextCap(2)}\r\n              >\r\n                Cap\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup aria-label=\"Text Alignment\">\r\n              <Button\r\n                variant={isLeft ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextAlg(0)}\r\n              >\r\n                <FontAwesomeIcon icon={faAlignLeft} />\r\n              </Button>\r\n              <Button\r\n                variant={isCenter ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextAlg(1)}\r\n              >\r\n                <FontAwesomeIcon icon={faAlignCenter} />\r\n              </Button>\r\n              <Button\r\n                variant={isRight ? \"secondary\" : \"light\"}\r\n                onClick={() => handleTextAlg(2)}\r\n              >\r\n                <FontAwesomeIcon icon={faAlignRight} />\r\n              </Button>\r\n            </ButtonGroup>\r\n\r\n            <InputGroup className=\"mt-3\">\r\n              <InputGroup.Text>Textarea</InputGroup.Text>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n                onChange={(e) => setNewContentText(e.target.value)}\r\n                value={newContentText}\r\n              />\r\n            </InputGroup>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={saveContent}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      )}\r\n      <div className=\"row m-1 p-1\">\r\n        <div className=\"col-4 align-self-center\">\r\n          <h6>{tags}</h6>\r\n        </div>\r\n        <div className=\"col-3 align-self-center\">\r\n          <button\r\n            className=\"btn btn-sm btn-outline-info align-self-center\"\r\n            onClick={handleShow}\r\n          >\r\n            Edit\r\n          </button>\r\n        </div>\r\n        <div className=\"col-3 align-self-center\">\r\n          <button\r\n            className=\"btn btn-sm btn-outline-danger align-self-center\"\r\n            onClick={handleDelete}\r\n          >\r\n            Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\webdev\\website_generator\\frontend\\src\\components\\Components.jsx",[],[],{"ruleId":"43","severity":1,"message":"44","line":37,"column":10,"nodeType":"45","messageId":"46","endLine":37,"endColumn":15},{"ruleId":"43","severity":1,"message":"47","line":38,"column":10,"nodeType":"45","messageId":"46","endLine":38,"endColumn":15},{"ruleId":"43","severity":1,"message":"48","line":156,"column":9,"nodeType":"45","messageId":"46","endLine":156,"endColumn":21},{"ruleId":"43","severity":1,"message":"49","line":160,"column":9,"nodeType":"45","messageId":"46","endLine":160,"endColumn":21},"no-unused-vars","'colNo' is assigned a value but never used.","Identifier","unusedVar","'rowNo' is assigned a value but never used.","'setRowNumber' is assigned a value but never used.","'setColNumber' is assigned a value but never used."]